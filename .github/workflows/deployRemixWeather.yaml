name: Deploy Remix Weather App to AKS

on:
  pull_request:
    branches: [main]
    paths:
      - 'app/**'
      - '*.tsx'
      - '*.ts'
      - 'package*.json'
      - 'Dockerfile'
      - 'remix.config.js'
      - 'tsconfig.json'
      - 'k8s/**'
  push:
    branches: [main]
    paths:
      - 'app/**'
      - '*.tsx'
      - '*.ts'
      - 'package*.json'
      - 'Dockerfile'
      - 'remix.config.js'
      - 'tsconfig.json'
      - 'k8s/**'

permissions:
  id-token: write
  contents: read
  pull-requests: write

#These environment variables are used by the terraform azure provider to setup OIDC authenticate. 
env:
  ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID_RW }}"
  ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
  ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
  ARM_ACCESS_KEY: "${{ secrets.ARM_ACCESS_KEY }}"
  # AKS cluster information
  AZURE_RESOURCE_GROUP: "cst8918-final-project-group-1-RG"
  AZURE_AKS_CLUSTER: "${{ github.event_name == 'push' && 'cst8918-final-project-group-1-aks-prod' || 'cst8918-final-project-group-1-aks-test' }}"
  ENVIRONMENT: "${{ github.event_name == 'push' && 'production' || 'test' }}"

defaults:
  run:
    working-directory: ./
  
jobs:
  deploy:
    name: Deploy to AKS
    runs-on: ubuntu-latest
    environment: ${{ github.event_name == 'push' && 'production' || 'test' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Wait for image to be available in ACR (give time for BuildPushDocker workflow to complete)
      - name: Wait for Docker image
        run: |
          echo "Waiting 90 seconds for Docker image to be available in ACR..."
          sleep 90

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID_RW }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.AZURE_RESOURCE_GROUP }}
          cluster-name: ${{ env.AZURE_AKS_CLUSTER }}

      - name: Create K8s directory if it doesn't exist
        run: |
          mkdir -p k8s
          
      - name: Get Redis Connection Info and Create Secret
        run: |
          # Get Redis information based on environment
          if [ "${{ env.ENVIRONMENT }}" == "production" ]; then
            REDIS_HOST=$(az redis show --name weather-cst8918-final-project-group-1-prod --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "hostName" -o tsv)
            REDIS_KEY=$(az redis list-keys --name weather-cst8918-final-project-group-1-prod --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "primaryKey" -o tsv)
          else
            REDIS_HOST=$(az redis show --name weather-cst8918-final-project-group-1-test --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "hostName" -o tsv)
            REDIS_KEY=$(az redis list-keys --name weather-cst8918-final-project-group-1-test --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "primaryKey" -o tsv)
          fi
          
          REDIS_CONNECTION="redis://:${REDIS_KEY}@${REDIS_HOST}:6380?tls=true"
          
          # Create or update Kubernetes secret
          kubectl create secret generic weather-app-secrets-${{ env.ENVIRONMENT }} \
            --from-literal=redis-connection-string="${REDIS_CONNECTION}" \
            --from-literal=weather-api-key="${{ secrets.WEATHER_API_KEY }}" \
            --dry-run=client -o yaml | kubectl apply -f -
            
          echo "Redis credentials stored in Kubernetes secret"

      - name: Generate K8s deployment file
        run: |
          cat > k8s/${{ env.ENVIRONMENT }}-deployment.yaml << EOF
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: weather-app-${{ env.ENVIRONMENT }}
            labels:
              app: weather-app
              environment: ${{ env.ENVIRONMENT }}
          spec:
            replicas: ${{ github.event_name == 'push' && '3' || '1' }}
            selector:
              matchLabels:
                app: weather-app
                environment: ${{ env.ENVIRONMENT }}
            template:
              metadata:
                labels:
                  app: weather-app
                  environment: ${{ env.ENVIRONMENT }}
              spec:
                containers:
                - name: weather-app
                  image: ${{ secrets.ACR_LOGIN_SERVER }}/weather-app:${{ github.sha }}
                  ports:
                  - containerPort: 3000
                  env:
                  - name: WEATHER_API_KEY
                    valueFrom:
                      secretKeyRef:
                        name: weather-app-secrets-${{ env.ENVIRONMENT }}
                        key: weather-api-key
                  - name: REDIS_CONNECTION_STRING
                    valueFrom:
                      secretKeyRef:
                        name: weather-app-secrets-${{ env.ENVIRONMENT }}
                        key: redis-connection-string
                  - name: REDIS_URL
                    valueFrom:
                      secretKeyRef:
                        name: weather-app-secrets-${{ env.ENVIRONMENT }}
                        key: redis-connection-string
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: weather-app-service-${{ env.ENVIRONMENT }}
          spec:
            selector:
              app: weather-app
              environment: ${{ env.ENVIRONMENT }}
            ports:
            - port: 80
              targetPort: 3000
            type: LoadBalancer
          EOF

      - name: Deploy to AKS
        run: |
          kubectl apply -f k8s/${{ env.ENVIRONMENT }}-deployment.yaml
          echo "Deployed to ${{ env.ENVIRONMENT }} environment"
          
      # Comment on PR
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `âœ… App deployed to ${{ env.ENVIRONMENT }} environment: \`${{ secrets.ACR_LOGIN_SERVER }}/weather-app:${{ github.sha }}\``
            })

